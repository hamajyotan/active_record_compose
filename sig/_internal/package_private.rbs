module ActiveRecordCompose
  module DelegateAttribute
    extend ActiveSupport::Concern

    def attributes: -> Hash[String, untyped]

    module ClassMethods
      def delegate_attribute: (*untyped methods, to: untyped, ?allow_nil: untyped?, ?private: untyped?) -> untyped
    end
  end

  class InnerModelCollection
    def initialize: (Model) -> void

    private
    attr_reader owner: Model
    attr_reader models: Array[InnerModel]
    def wrap: (_ARLike | InnerModel, ?destroy: (bool | Symbol | destroy_context_type), ?if: (nil | Symbol | condition_type)) -> InnerModel

    module PackagePrivate
      def __wrapped_models: () -> Array[InnerModel]

      private
      def models: () -> Array[InnerModel]
    end

    include PackagePrivate
  end

  class InnerModel
    def initialize: (_ARLike, ?destroy: (bool | destroy_context_type), ?if: (nil | condition_type)) -> void
    def destroy_context?: -> bool
    def ignore?: -> bool
    def save: -> bool
    def save!: -> untyped
    def invalid?: -> bool
    def valid?: -> bool
    def is_a?: (untyped) -> bool
    def ==: (untyped) -> bool

    private
    attr_reader model: _ARLike
    attr_reader destroy_context_type: (bool | destroy_context_type)
    attr_reader if_option: (nil | condition_type)

    module PackagePrivate
      def __raw_model: () -> _ARLike

      private
      def model: () -> _ARLike
    end

    include PackagePrivate
  end

  class Model
    include DelegateAttribute
    extend DelegateAttribute::ClassMethods
    include TransactionSupport
    extend TransactionSupport::ClassMethods

    @__models: InnerModelCollection
  end

  module TransactionSupport
    include ActiveRecord::Transactions

    def id: -> untyped

    module ClassMethods
      def connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
      def lease_connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
      def with_connection: [T] () { () -> T } -> T

      private
      def ar_class: -> singleton(ActiveRecord::Base)
    end
  end
end
