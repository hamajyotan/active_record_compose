# TypeProf 0.21.9

# Classes
module ActiveRecordCompose
  VERSION: String

  interface _ARLike
    def save: (**untyped options) -> bool
    def save!: (**untyped options) -> untyped
    def invalid?: (?validation_context context) -> bool
    def valid?: (?validation_context context) -> bool
    def errors: -> untyped
    def is_a?: (untyped) -> bool
    def ==: (untyped) -> bool
  end
  interface _ARLikeWithDestroy
    def save: (**untyped options) -> bool
    def save!: (**untyped options) -> untyped
    def destroy: -> bool
    def destroy!: -> untyped
    def invalid?: (?validation_context context) -> bool
    def valid?: (?validation_context context) -> bool
    def errors: -> untyped
    def is_a?: (untyped) -> bool
    def ==: (untyped) -> bool
  end
  type ar_like = (_ARLike | _ARLikeWithDestroy)

  type validation_context = nil | Symbol | Array[Symbol]

  type condition[T] = Symbol | ^(T) [self: T] -> boolish
  type callback[T] = Symbol | ^(T) [self: T] -> void
  type around_callback[T] = Symbol | ^(T, Proc) [self: T] -> void

  type attribute_name = (String | Symbol)
  type destroy_context_type = ((^() -> boolish) | (^(ar_like) -> boolish))
  type condition_type = ((^() -> boolish) | (^(ar_like) -> boolish))

  class ComposedCollection
    include ::Enumerable[ar_like]

    def each: () { (ar_like) -> void } -> ComposedCollection | () -> Enumerator[ar_like, self]
    def <<: (ar_like) -> self
    def push: (ar_like, ?destroy: (bool | Symbol | destroy_context_type), ?if: (nil | Symbol | condition_type)) -> self
    def empty?: -> bool
    def clear: -> self
    def delete: (ar_like) -> ComposedCollection?
  end

  class Error < StandardError
  end

  class LockedCollectionError < Error
    def initialize: (untyped cause, Model owner) -> void
    attr_reader owner: Model
    @owner: Model
  end

  class Model
    include ActiveModel::Model
    include ActiveModel::Validations::Callbacks
    include ActiveModel::Attributes
    extend ActiveModel::Callbacks
    extend ActiveModel::Validations::ClassMethods
    extend ActiveModel::Validations::Callbacks::ClassMethods
    extend ActiveModel::Attributes::ClassMethods

    def self.before_save: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.around_save: (*around_callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.after_save: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void

    def self.before_create: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.around_create: (*around_callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.after_create: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void

    def self.before_update: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.around_update: (*around_callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.after_update: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void

    def self.after_commit: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void
    def self.after_rollback: (*callback[instance], ?if: condition[instance], ?unless: condition[instance], **untyped) ?{ () [self: instance] -> void } -> void

    def self.delegate_attribute: (*untyped methods, to: untyped, ?allow_nil: bool) -> untyped
    def self.connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
    def self.lease_connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
    def self.with_connection: [T] () { () -> T } -> T

    def initialize: (?Hash[attribute_name, untyped]) -> void
    def save: (**untyped options) -> bool
    def save!: (**untyped options) -> untyped
    def update: (Hash[attribute_name, untyped]) -> bool
    def update!: (Hash[attribute_name, untyped]) -> untyped

    private
    def models: -> ComposedCollection
  end
end
