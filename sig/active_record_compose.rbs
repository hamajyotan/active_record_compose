# TypeProf 0.21.9

# Classes
module ActiveRecordCompose
  VERSION: String

  interface _ARLike
    def save: -> bool
    def save!: -> untyped
    def destroy: -> bool
    def destroy!: -> untyped
    def invalid?: -> bool
    def valid?: -> bool
    def errors: -> untyped
  end

  type attribute_name = (String | Symbol)
  type context = (:save | :destroy)
  type context_proc = ((^() -> context) | (^(_ARLike) -> context))
  type destroy_context_type = (bool | Symbol | (^() -> boolish) | (^(_ARLike) -> boolish))

  module DelegateAttribute
    extend ActiveSupport::Concern

    def attributes: -> Hash[String, untyped]

    module ClassMethods
      def delegate_attribute: (*untyped methods, to: untyped?, ?allow_nil: untyped?, ?private: untyped?) -> untyped
    end
  end

  class InnerModelCollection
    include ::Enumerable[_ARLike]

    def initialize: (Model) -> void
    def each: () { (_ARLike) -> void } -> InnerModelCollection | () -> Enumerator[_ARLike, self]
    def <<: (_ARLike) -> self
    def push: (_ARLike, ?destroy: destroy_context_type, ?context: (nil | context | context_proc)) -> self
    def empty?: -> bool
    def clear: -> self
    def delete: (_ARLike | InnerModel, ?destroy: destroy_context_type, ?context: (nil | context | context_proc)) -> InnerModelCollection?

    private
    attr_reader owner: Model
    attr_reader models: Array[InnerModel]
    def wrap: (_ARLike | InnerModel, destroy: destroy_context_type, ?context: (nil | context | context_proc)) -> InnerModel
  end

  class InnerModel
    def initialize: (Model, _ARLike, ?destroy: destroy_context_type, ?context: (nil | context | context_proc)) -> void
    def destroy_context?: -> bool
    def save: -> bool
    def save!: -> untyped
    def invalid?: -> bool
    def valid?: -> bool
    def ==: (untyped) -> bool

    private
    attr_reader owner: Model
    attr_reader model: _ARLike
    attr_reader destroy_context_type: destroy_context_type
  end

  class Model
    extend ActiveModel::Callbacks
    include ActiveModel::Model
    include ActiveModel::Validations::Callbacks
    extend ActiveModel::Validations::ClassMethods
    include ActiveModel::Attributes
    include DelegateAttribute
    extend DelegateAttribute::ClassMethods
    include TransactionSupport
    extend TransactionSupport::ClassMethods

    @__models: InnerModelCollection

    def initialize: (?Hash[attribute_name, untyped]) -> void
    def save: -> bool
    def save!: -> untyped
    def create: (?Hash[attribute_name, untyped]) -> bool
    def create!: (?Hash[attribute_name, untyped]) -> untyped
    def update: (?Hash[attribute_name, untyped]) -> bool
    def update!: (?Hash[attribute_name, untyped]) -> untyped

    private
    def models: -> InnerModelCollection
    def wrapped_models: -> Enumerator[InnerModel, InnerModelCollection]
    def validate_models: -> void
    def save_models: (bang: bool) -> bool
    def raise_validation_error: -> bot
    def raise_on_save_error: -> bot
    def raise_on_save_error_message: -> String
  end

  module TransactionSupport
    include ActiveRecord::Transactions

    def id: -> untyped

    module ClassMethods
      def connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
      def lease_connection: -> ActiveRecord::ConnectionAdapters::AbstractAdapter
      def with_connection: [T] () { () -> T } -> T

      private
      def ar_class: -> singleton(ActiveRecord::Base)
    end
  end
end
